- Add picture illustrating driver (tape without cursor movement)
- Use TEMP_FAILURE_RETRY()?
  - and explain it, providing implementation code, on slides

    https://www.gnu.org/software/libc/manual/html_node/Interrupted-Primitives.html#Interrupted-Primitives
    https://cs.android.com/search?q=TEMP_FAILURE_RETRY&sq=&ss=android%2Fplatform%2Fsuperproject


+ assignment (optional): power management
+ assignment (optional): overlays



- Add slide with electrical components (symbol + photo + name)?
- Revise commands in appendix A
- Add by-line explanation for each driver? Or just show it via vim?
- Add references (LDD3, Bootlin slides, related kernel documentation)
- Add clock introspection
- Add prerequisites: bring BBB and laptop
- Split attempt #3 (at least) into logical chunks: pm, registering, ioctl, etc.
- Add info about GPIO controller driver (device tree, driver, compatible,
  kernel frameworks for that, etc); this is what allows us to write
  architecture-independent (cross-platform) driver
- Add interconnect explanation (benefitc vs conventional bus)?
- Explain about binding documentation (related)
- Add "Questions?" to "Thank you!" slide, like on my first lecture
- Show GPIO controller driver, device tree, etc
  - that's how platform-independent GPIO API is done
- If split into 2 lectures: probably add input_dev API and ask students to
  report found key to linux (in assignment)
